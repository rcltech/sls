{"version":3,"sources":["images/available.png","images/unavailable.png","Root.js","components/Washer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase_url","withWasherStatus","WrappedComponent","props","state","data","axios","get","this","setState","React","Component","useStyles","makeStyles","theme","root","padding","spacing","Washer","status","classes","className","src","available","alt","unavailable","createWashers","map","value","key","console","log","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,yQCErCC,EAAe,oEAwBNC,MAtBf,SAA0BC,GACxB,mBACE,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,IAHS,EADrB,+MASuBC,IAAMC,IAAIP,GATjC,OASUK,EATV,OAUIG,KAAKC,SAAS,CACZJ,SAXN,mIAgBI,OAAO,kBAACH,EAAD,eAAkBG,KAAMG,KAAKJ,MAAMC,KAAKA,MAAUG,KAAKL,YAhBlE,EAAM,CAAeO,IAAMC,Y,kDCEvBC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,QAASF,EAAMG,QAAQ,GAAK,OAoBrBC,EAhBA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACPC,EAAUR,IAChB,OAAc,IAAXO,EAEK,yBAAKE,UAAWD,EAAQL,MACpB,yBAAKO,IAAKC,IAAWC,IAAI,YAKjC,yBAAKH,UAAWD,EAAQL,MACpB,yBAAKO,IAAKG,IAAaD,IAAI,aChBjCE,EAAgB,SAACrB,GAAD,OAClBsB,cAAItB,EAAM,SAACuB,EAAOC,GAAR,OACN,yBAAKR,UAAU,QACb,kBAAC,EAAD,CAAQQ,IAAKA,EAAKV,OAAQS,QA4BrB3B,QAvBf,YAAsB,IAARI,EAAO,EAAPA,KAEZ,OADAyB,QAAQC,IAAI1B,GAEV,yBAAKgB,UAAU,OACb,kBAACW,EAAA,EAAD,CAAWX,UAAU,cACnB,6BACE,yBAAKA,UAAU,OAAOC,IAAI,yBAAyBE,IAAI,wBAEzD,yBAAKH,UAAU,eAAf,yBAMF,kBAACW,EAAA,EAAD,CAAWX,UAAU,YACnB,yBAAKA,UAAU,aACZK,EAAcrB,QCpBL4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.50306ed5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/available.000429b6.png\";","module.exports = __webpack_public_path__ + \"static/media/unavailable.d34a13c1.png\";","import React from 'react';\nimport axios from 'axios'\nconst firebase_url = 'https://us-central1-rcsls-2018.cloudfunctions.net/getWasherStatus';\n\nfunction withWasherStatus(WrappedComponent) {\n  return class extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: {}\n      };\n    }\n\n    async componentDidMount() {\n      const data = await axios.get(firebase_url);\n      this.setState({\n        data\n      })\n    }\n\n    render() {\n      return <WrappedComponent data={this.state.data.data} {...this.props} />;\n    }\n  };\n}\n\nexport default withWasherStatus;\n","import React from 'react';\nimport Paper from \"@material-ui/core/Paper\";\nimport {makeStyles} from \"@material-ui/core\";\n\nimport available from '../images/available.png';\nimport unavailable from '../images/unavailable.png';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(0.5, 2),\n    },\n}));\n\nconst Washer = ({status}) => {\n    const classes = useStyles();\n    if(status === 1){\n        return(\n            <div className={classes.root}>\n                <img src={available} alt=\"Washer\" />\n            </div>\n        );\n    }\n    return(\n        <div className={classes.root}>\n            <img src={unavailable} alt=\"Washer\" />\n        </div>\n    );\n};\n\nexport default Washer;\n","import React from 'react';\nimport 'typeface-roboto';\nimport {Container, Grid} from '@material-ui/core';\nimport './App.css';\nimport withWasherStatus from './Root.js';\nimport {map} from 'lodash';\nimport Washer from './components/Washer.js'\n\nconst createWashers = (data) => (\n    map(data, (value, key) => (\n        <div className=\"item\">\n          <Washer key={key} status={value}/>\n        </div>\n    ))\n);\n\nfunction App({data}) {\n  console.log(data);\n  return (\n    <div className=\"App\">\n      <Container className=\"App-header\">\n        <div>\n          <img className=\"logo\" src=\"RCTECH-logo_chubby.png\" alt=\"RCTECH-logo_chubby\"/>\n        </div>\n        <div className=\"header-text\">\n          Smart Laundry System\n        </div>\n\n      </Container>\n\n      <Container className=\"App-body\">\n        <div className=\"container\">\n          {createWashers(data)}\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default withWasherStatus(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}